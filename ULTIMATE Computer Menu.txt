package my_project;
import java.util.Scanner;

class MyClass {
	static Scanner userinput = new Scanner(System.in);
	public static void main (String[] args){  
		System.out.println("Welcome to the ULTIMATE COMPUTER!");
		System.out.println("Here are your options:");
		System.out.println("");
		
		//get options for use in the menu
		String[] userOptions = {
				"Display", 
				"Text Art", 
				"Calculator", 
				"Binary Calculator", 
				"Encouragement", 
				"Dice", 
				"Oppish",
				"Fibonacci",
				"Double Factorial"
		};
		
		//align options to columns
		String[] alignedUserOptions = alignOptions(userOptions);
		
		//loop as user goes through the programs, will break when they choose to exit
		while (true) {
			try {
				//display them
				displayOptions(alignedUserOptions);
				String userChoice = promptString("");
				
				//quit if the user opts to quit
				if (userChoice.equals("0")) {
					break;
				} else {
					//if the user doesn't quit, give them their requested program
					System.out.println("");
					chooseProgram(userChoice);
				}
				
			} catch (Exception e) {
				//not really sure how this would happen, but you can't be too safe
				System.out.println("Error: An unknown error occured. Taking you back to the menu...");
			}
			
			System.out.println("");
		}
		
		//program end
		System.out.println("");
		System.out.println("Goodbye!");
	}
	//function to take in user input and call the program function they request
    public static void chooseProgram(String choice) {
		if (choice.equals("1")) {
			display();
		} else if (choice.equals("2")) {
			textArt();
		} else if (choice.equals("3")) {
			calculator();
		} else if (choice.equals("4")) {
			binaryCalculator();
		} else if (choice.equals("5")) {
			encouragement();
		} else if (choice.equals("6")) {
			dice();
		} else if (choice.equals("7")) {
			oppish();
		} else if (choice.equals("8")) {
			fibonacci();
		} else if (choice.equals("9")) {
			doubleFactorial();
		} else {
			//0 was handled earlier, so any other entries don't have a program
			System.out.println("Error: Your entry is invalid. Please enter a number corresponding to an available program.");
		}
    }
    //takes in options list, aligns them to columns
	public static String[] alignOptions(String[] options){
		String[] alignedOptions = options;
		
		for (int i = 0; i < 3; i++) {
			String topRow = options[i];
			String middleRow = options[i+3];
			String bottomRow = options[i+6];
			
			int columnWidth = topRow.length();
			if (middleRow.length() > columnWidth) {columnWidth = middleRow.length();}
			if (bottomRow.length() > columnWidth) {columnWidth = bottomRow.length();}
			
			int topRowSpaces = columnWidth - topRow.length();
			int middleRowSpaces = columnWidth - middleRow.length();
			int bottomRowSpaces = columnWidth - bottomRow.length();
			
			for (int j = 0; j < columnWidth; j++) {
				//this slowly adds the required number of spaces,
				//one per loop until the needed amount is reached
				if (j < topRowSpaces) {alignedOptions[i] = alignedOptions[i] + " ";}
				if (j < middleRowSpaces) {alignedOptions[i+3] = alignedOptions[i+3] + " ";}
				if (j < bottomRowSpaces) {alignedOptions[i+6] = alignedOptions[i+6] + " ";}
			}
			
		}
		
		return alignedOptions;
		
	}
	//prints pre-aligned options list
	public static void displayOptions(String[] options){
		
		//get the width of the menu, accounting for spacers and number selections
		int menuWidth = options[0].length() + options[1].length() + options[2].length() + 4*3 + 2;
		
		//top bar
		for (int i = 0; i < menuWidth; i++) {
			System.out.print("-");
		}
		
		System.out.print("\n");
		
		//loop in groups of three so each row is accounted for at once
		for (int i = 3; i < 10; i += 3) {
			//i works as the visual display (1-9), whereas index is the array representation (0-8)
			int index = i - 1;
			
			//loop over each item in the row and print
			for (int j = 2; j > -1; j--) {
				System.out.format("[%d] %s ", i-j, options[index-j]);

			}
			
			System.out.print("\n");

		}
		
		//bottom bar
		for (int i = 0; i < menuWidth; i++) {
			System.out.print("-");
		}
		
		//display quit option
		System.out.print("\n");
		System.out.print("[0] Quit\n");

	}
    //available program functions
    public static void display() {
		System.out.println("This is a placeholder for the Display program.");
    }
    public static void textArt() {
		System.out.println("This is a placeholder for the Text Art program.");
    }
    public static void calculator() {
		System.out.println("This is a placeholder for the Calculator program.");
    }
    public static void binaryCalculator() {
		System.out.println("This is a placeholder for the Binary Calculator program.");
    }
    public static void encouragement() {
		System.out.println("This is a placeholder for the Encouragement program.");
    }
    public static void dice() {
		System.out.println("This is a placeholder for the Dice program.");
    }
    public static void oppish() {
		System.out.println("This is a placeholder for the Oppish program.");
    }
    public static void fibonacci() {
		System.out.println("This is a placeholder for the Fibonacci program.");
    }
    public static void doubleFactorial() {
		System.out.println("This is a placeholder for the Double Factorial program.");
    }
    //helper function since my user input format is so consistent
    public static String promptString(String message) {
    	System.out.format("%s \n>>", message);
    	return userinput.nextLine();
    }
}